%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.5.1
%%CreationDate: Mon Jul 31 20:13:37 2023
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ggACGCUUCAUAUAAUCCUAAUGAUAUGGUUUGGGAGUUUCUACCAAGAGCCUUAAACUCUUGAUUAUGAAGUG\
) } def
/len { sequence length } bind def

/coor [
[84.56950378 287.56716919]
[68.29966736 285.51181030]
[62.19504166 270.29122925]
[72.53554535 257.56307983]
[74.41554260 242.68135071]
[76.29553986 227.79963684]
[78.17553711 212.91790771]
[80.05554199 198.03619385]
[81.93553925 183.15446472]
[83.81553650 168.27275085]
[85.69553375 153.39102173]
[87.57553101 138.50930786]
[72.95540619 130.09857178]
[63.03430939 116.45818329]
[59.53603363 99.95816803]
[63.06841660 83.46542358]
[50.75117874 74.90471649]
[38.43394089 66.34401703]
[26.11670113 57.78330994]
[13.79946327 49.22260666]
[1.48222518 40.66190338]
[-12.73398685 46.65380478]
[-27.92895699 43.98613739]
[-39.25402451 33.51014709]
[-43.09540176 18.56868172]
[-38.22732162 3.92951012]
[-26.20316505 -5.73606110]
[-10.85980320 -7.34378386]
[2.90675664 -0.38063958]
[10.70365429 12.93145752]
[10.04292870 28.34466553]
[22.36016655 36.90536880]
[34.67740631 45.46607208]
[46.99464417 54.02677536]
[59.31188202 62.58747864]
[71.62911987 71.14818573]
[78.58203125 65.66918182]
[86.56000519 61.83325195]
[95.18121338 59.82396698]
[104.03305054 59.73750305]
[112.69186401 61.57799149]
[120.74324799 65.25734711]
[127.80186462 70.59947968]
[133.52989197 77.34870911]
[137.65318298 85.18202972]
[152.38748169 82.37130737]
[167.12179565 79.56059265]
[181.85610962 76.74987030]
[196.59040833 73.93914795]
[211.32472229 71.12843323]
[218.79522705 57.39068604]
[233.36724854 51.71704483]
[248.16032410 56.78643036]
[256.18963623 70.20523071]
[253.66397095 85.63750458]
[241.77586365 95.79660034]
[226.13853455 95.88570404]
[214.13543701 85.86273956]
[199.40113831 88.67346191]
[184.66682434 91.48417664]
[169.93251038 94.29489899]
[155.19821167 97.10562134]
[140.46389771 99.91633606]
[135.47229004 119.46923065]
[121.65813446 134.17980957]
[102.45725250 140.38931274]
[100.57725525 155.27102661]
[98.69725800 170.15274048]
[96.81726074 185.03446960]
[94.93726349 199.91618347]
[93.05725861 214.79791260]
[91.17726135 229.67962646]
[89.29726410 244.56135559]
[87.41726685 259.44308472]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[4 74]
[5 73]
[6 72]
[7 71]
[8 70]
[9 69]
[10 68]
[11 67]
[12 66]
[16 36]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[45 63]
[46 62]
[47 61]
[48 60]
[49 59]
[50 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
