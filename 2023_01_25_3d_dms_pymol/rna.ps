%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.5.0
%%CreationDate: Wed Jan 25 10:12:48 2023
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: --noLP 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUGAUAUGGAUUUACUCCGAGGAGACGAACUACCACGAACAGGGGAAACUCUACCCGUGGCGUCUCCGUUUGACGAGUAAGUCCUAAGUCAACA\
) } def
/len { sequence length } bind def

/coor [
[112.50180817 405.50323486]
[112.01101685 390.51126099]
[111.52023315 375.51928711]
[111.02944946 360.52734375]
[110.53865814 345.53536987]
[110.04787445 330.54339600]
[97.32273865 319.68344116]
[96.27466583 302.65124512]
[108.02472687 289.81848145]
[107.04368591 274.85061646]
[106.06263733 259.88272095]
[105.08158875 244.91484070]
[104.10054016 229.94696045]
[103.11949158 214.97908020]
[102.13845062 200.01118469]
[101.15740204 185.04330444]
[100.17635345 170.07542419]
[99.19530487 155.10754395]
[97.72505188 140.17976379]
[95.76715851 125.30809784]
[93.80926514 110.43642426]
[91.36582947 95.63677216]
[88.43947601 80.92499542]
[85.51312256 66.21321106]
[82.58676910 51.50143433]
[79.66041565 36.78965378]
[76.73405457 22.07787514]
[73.80770111 7.36609650]
[70.78142548 4.38535595]
[68.94599915 0.95760012]
[68.30094147 -2.51685572]
[68.72419739 -5.67485571]
[69.99292755 -8.22459030]
[71.81320953 -9.97118855]
[71.32242584 -24.96315765]
[70.83163452 -39.95512772]
[70.34085083 -54.94709396]
[69.85006714 -69.93906403]
[57.17198944 -78.68963623]
[52.13636780 -93.05960846]
[56.47654343 -107.46887207]
[68.32739258 -116.45193481]
[67.83660126 -131.44390869]
[67.34581757 -146.43586731]
[66.85503387 -161.42784119]
[57.74039459 -175.06071472]
[65.23121643 -189.64906311]
[81.62158203 -190.18562317]
[90.05049133 -176.11843872]
[81.84700012 -161.91862488]
[82.33778381 -146.92666626]
[82.82857513 -131.93469238]
[83.31935883 -116.94271851]
[95.73235321 -108.75397491]
[101.00564575 -94.65942383]
[96.92064667 -79.99087524]
[84.84203339 -70.42984772]
[85.33281708 -55.43788147]
[85.82360840 -40.44591141]
[86.31439209 -25.45394325]
[86.80517578 -10.46197510]
[88.51948547 4.43974161]
[91.44583893 19.15152168]
[94.37219238 33.86330032]
[97.29854584 48.57508087]
[100.22489929 63.28685760]
[103.15125275 77.99863434]
[106.07761383 92.71041870]
[109.82569122 96.67818451]
[110.97257996 102.49745178]
[108.68093872 108.47853088]
[110.63883209 123.35020447]
[112.59672546 138.22187805]
[116.49191284 143.95347595]
[116.71759033 149.88043213]
[114.16319275 154.12649536]
[115.14423370 169.09437561]
[116.12528229 184.06225586]
[117.10633087 199.03013611]
[118.08737946 213.99803162]
[119.06842804 228.96591187]
[120.04946899 243.93379211]
[121.03051758 258.90167236]
[122.01156616 273.86956787]
[122.99261475 288.83743286]
[134.15684509 296.57830811]
[138.69836426 309.17413330]
[135.14802551 321.88122559]
[125.03984070 330.05261230]
[125.53063202 345.04458618]
[126.02141571 360.03652954]
[126.51219940 375.02850342]
[127.00299072 390.02047729]
[127.49377441 405.01245117]
[130.31353760 424.18792725]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[1 94]
[2 93]
[3 92]
[4 91]
[5 90]
[6 89]
[9 85]
[10 84]
[11 83]
[12 82]
[13 81]
[14 80]
[15 79]
[16 78]
[17 77]
[18 76]
[19 73]
[20 72]
[21 71]
[22 68]
[23 67]
[24 66]
[25 65]
[26 64]
[27 63]
[28 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[42 53]
[43 52]
[44 51]
[45 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
